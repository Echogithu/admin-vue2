<template>
  <a-menu
    theme="dark"
    mode="inline"
    @click="clickMenuItem"
    :selected-keys="selectedKeys"
    :open-keys="openKeys"
  >
    <template v-for="route in menus">
      <sider-menu-item v-if="hasShowChildren(route.children)" :key="route.name" :route="route"></sider-menu-item>
      <sub-menu v-else :key="'sub-' + route.name" :route="route"></sub-menu>
    </template>
  </a-menu>
</template>

<script>
import SubMenu from './SubMenu.vue';
import SiderMenuItem from './SiderMenuItem.vue';
import { routes } from '@/router/routes.js';
import { isLink } from '@/utils/toolsFn.js';
export default {
  name: 'SiderMenu',
  components: {
    SubMenu,
    SiderMenuItem
  },
  computed: {
    menus: () => {
      console.log('routes :>> ', routes.find(item => item.name === 'Layout').children);

      return routes.find(item => item.name === 'Layout').children;
    }
  },
  data() {
    return {
      selectedKeys: [],
      openKeys: []
    };
  },
  mounted() {
    // console.log('object :>> ', this.$store.state.layout.collapsed);
    // if (!this.$store.state.layout.collapsed) {
    //   this.initMenuOpen();
    // }
    // this.setMenuActive();
  },
  methods: {
    // // 默认展开所处的路由菜单
    // initMenuOpen() {
    //   const routeMatched = this.$route.matched;
    //   this.openKeys = this.getOpenKeys(routeMatched[routeMatched.length - 1]);
    // },

    // // 设置选中的路由
    // setMenuActive() {
    //   const route = this.$route.matched.concat();
    //   this.selectedKeys = [route.pop().name];
    // },

    // // 获取展开keys
    getOpenKeys(route, openKeys = []) {
      if (route.parent && route.parent.name) {
        openKeys.push(route.parent.name);
        this.getOpenKeys(route.parent, openKeys);
      }
      console.log('openKeys :>> ', openKeys);
      return openKeys;
    },

    // 点击菜单
    clickMenuItem({ key }) {
      if (isLink(key)) {
        window.open(key);
      } else {
        this.$router.push({ name: key });
      }
    },

    // 判断是否有可展示的children
    hasShowChildren(children = []) {
      const showingChildren = children.filter(item => {
        return typeof item.meta.hidden === 'boolean' ? !item.meta.hidden : true;
      });
      return !showingChildren.length;
    }
  },
  watch: {
    $route() {
      this.setMenuActive();
    }
  }
};
</script>

<style lang="scss" scoped></style>
